/* eslint-disable camelcase */
import {
  PipelineRunKF,
  PipelineRunResourceKF,
  RunStorageStateKF,
} from '~/concepts/pipelines/kfTypes';

export const buildMockRunKF = (run?: Partial<PipelineRunKF>): PipelineRunKF => ({
  id: 'test-run',
  name: 'Test run',
  error: '',
  storage_state: RunStorageStateKF.AVAILABLE,
  metrics: [],
  pipeline_spec: {
    runtime_config: {
      parameters: {},
      pipeline_root: '',
    },
    workflow_manifest:
      'apiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  name: conditional-execution-pipeline\n  annotations:\n    tekton.dev/output_artifacts: \'{"flip-coin": [{"key": "artifacts/$PIPELINERUN/flip-coin/Output.tgz",\n      "name": "flip-coin-Output", "path": "/tmp/outputs/Output/data"}], "random-num":\n      [{"key": "artifacts/$PIPELINERUN/random-num/Output.tgz", "name": "random-num-Output",\n      "path": "/tmp/outputs/Output/data"}], "random-num-2": [{"key": "artifacts/$PIPELINERUN/random-num-2/Output.tgz",\n      "name": "random-num-2-Output", "path": "/tmp/outputs/Output/data"}]}\'\n    tekton.dev/input_artifacts: \'{"print-msg": [{"name": "random-num-Output", "parent_task":\n      "random-num"}], "print-msg-2": [{"name": "random-num-Output", "parent_task":\n      "random-num"}], "print-msg-3": [{"name": "random-num-2-Output", "parent_task":\n      "random-num-2"}], "print-msg-4": [{"name": "random-num-2-Output", "parent_task":\n      "random-num-2"}]}\'\n    tekton.dev/artifact_bucket: mlpipeline\n    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000\n    tekton.dev/artifact_endpoint_scheme: http://\n    tekton.dev/artifact_items: \'{"flip-coin": [["Output", "$(results.Output.path)"]],\n      "print-msg": [], "print-msg-2": [], "print-msg-3": [], "print-msg-4": [], "random-num":\n      [["Output", "$(results.Output.path)"]], "random-num-2": [["Output", "$(results.Output.path)"]]}\'\n    sidecar.istio.io/inject: "false"\n    tekton.dev/template: \'\'\n    pipelines.kubeflow.org/big_data_passing_format: $(workspaces.$TASK_NAME.path)/artifacts/$ORIG_PR_NAME/$TASKRUN_NAME/$TASK_PARAM_NAME\n    pipelines.kubeflow.org/pipeline_spec: \'{"description": "Shows how to use dsl.Condition().",\n      "name": "conditional-execution-pipeline"}\'\n  labels:\n    pipelines.kubeflow.org/pipelinename: \'\'\n    pipelines.kubeflow.org/generation: \'\'\nspec:\n  pipelineSpec:\n    tasks:\n    - name: flip-coin\n      taskSpec:\n        steps:\n        - name: main\n          args:\n          - \'----output-paths\'\n          - $(results.Output.path)\n          command:\n          - sh\n          - -ec\n          - |\n            program_path=$(mktemp)\n            printf "%s" "$0" > "$program_path"\n            python3 -u "$program_path" "$@"\n          - |\n            def flip_coin():\n                """Flip a coin and output heads or tails randomly."""\n                import random\n                result = \'heads\' if random.randint(0, 1) == 0 else \'tails\'\n                print(result)\n                return result\n\n            def _serialize_str(str_value: str) -> str:\n                if not isinstance(str_value, str):\n                    raise TypeError(\'Value "{}" has type "{}" instead of str.\'.format(\n                        str(str_value), str(type(str_value))))\n                return str_value\n\n            import argparse\n            _parser = argparse.ArgumentParser(prog=\'Flip coin\', description=\'Flip a coin and output heads or tails randomly.\')\n            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)\n            _parsed_args = vars(_parser.parse_args())\n            _output_files = _parsed_args.pop("_output_paths", [])\n\n            _outputs = flip_coin(**_parsed_args)\n\n            _outputs = [_outputs]\n\n            _output_serializers = [\n                _serialize_str,\n\n            ]\n\n            import os\n            for idx, output_file in enumerate(_output_files):\n                try:\n                    os.makedirs(os.path.dirname(output_file))\n                except OSError:\n                    pass\n                with open(output_file, \'w\') as f:\n                    f.write(_output_serializers[idx](_outputs[idx]))\n          image: python:alpine3.6\n        results:\n        - name: Output\n          type: string\n          description: /tmp/outputs/Output/data\n        metadata:\n          labels:\n            pipelines.kubeflow.org/cache_enabled: "true"\n          annotations:\n            pipelines.kubeflow.org/component_spec_digest: \'{"name": "Flip coin", "outputs":\n              [{"name": "Output", "type": "String"}], "version": "Flip coin@sha256=83ef617eda2e04a688908716a02461237baee3cd04754ea99894e441b1f0679a"}\'\n    - name: random-num\n      taskSpec:\n        steps:\n        - name: main\n          args:\n          - --low\n          - \'0\'\n          - --high\n          - \'9\'\n          - \'----output-paths\'\n          - $(results.Output.path)\n          command:\n          - sh\n          - -ec\n          - |\n            program_path=$(mktemp)\n            printf "%s" "$0" > "$program_path"\n            python3 -u "$program_path" "$@"\n          - |\n            def random_num(low, high):\n                """Generate a random number between low and high."""\n                import random\n                result = random.randint(low, high)\n                print(result)\n                return result\n\n            def _serialize_int(int_value: int) -> str:\n                if isinstance(int_value, str):\n                    return int_value\n                if not isinstance(int_value, int):\n                    raise TypeError(\'Value "{}" has type "{}" instead of int.\'.format(\n                        str(int_value), str(type(int_value))))\n                return str(int_value)\n\n            import argparse\n            _parser = argparse.ArgumentParser(prog=\'Random num\', description=\'Generate a random number between low and high.\')\n            _parser.add_argument("--low", dest="low", type=int, required=True, default=argparse.SUPPRESS)\n            _parser.add_argument("--high", dest="high", type=int, required=True, default=argparse.SUPPRESS)\n            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)\n            _parsed_args = vars(_parser.parse_args())\n            _output_files = _parsed_args.pop("_output_paths", [])\n\n            _outputs = random_num(**_parsed_args)\n\n            _outputs = [_outputs]\n\n            _output_serializers = [\n                _serialize_int,\n\n            ]\n\n            import os\n            for idx, output_file in enumerate(_output_files):\n                try:\n                    os.makedirs(os.path.dirname(output_file))\n                except OSError:\n                    pass\n                with open(output_file, \'w\') as f:\n                    f.write(_output_serializers[idx](_outputs[idx]))\n          image: python:alpine3.6\n        results:\n        - name: Output\n          type: string\n          description: /tmp/outputs/Output/data\n        metadata:\n          labels:\n            pipelines.kubeflow.org/cache_enabled: "true"\n          annotations:\n            pipelines.kubeflow.org/component_spec_digest: \'{"name": "Random num",\n              "outputs": [{"name": "Output", "type": "Integer"}], "version": "Random\n              num@sha256=da6efc3f1c1ef51912b3964a64b773aa38436116bb83f188a1a57ea6f1e6a541"}\'\n      when:\n      - input: $(tasks.condition-1.results.outcome)\n        operator: in\n        values:\n        - "true"\n    - name: print-msg\n      params:\n      - name: random-num-Output\n        value: $(tasks.random-num.results.Output)\n      taskSpec:\n        steps:\n        - name: main\n          args:\n          - --msg\n          - heads and $(inputs.params.random-num-Output) > 5!\n          command:\n          - sh\n          - -ec\n          - |\n            program_path=$(mktemp)\n            printf "%s" "$0" > "$program_path"\n            python3 -u "$program_path" "$@"\n          - |\n            def print_msg(msg):\n                """Print a message."""\n                print(msg)\n\n            import argparse\n            _parser = argparse.ArgumentParser(prog=\'Print msg\', description=\'Print a message.\')\n            _parser.add_argument("--msg", dest="msg", type=str, required=True, default=argparse.SUPPRESS)\n            _parsed_args = vars(_parser.parse_args())\n\n            _outputs = print_msg(**_parsed_args)\n          image: python:alpine3.6\n        params:\n        - name: random-num-Output\n        metadata:\n          labels:\n            pipelines.kubeflow.org/cache_enabled: "true"\n          annotations:\n            pipelines.kubeflow.org/component_spec_digest: \'{"name": "Print msg", "outputs":\n              [], "version": "Print msg@sha256=a13aed2f155afe0e8a1d1e29efc69b1cb1c3b170c45129f80ffe8d0a03a07861"}\'\n      when:\n      - input: $(tasks.condition-2.results.outcome)\n        operator: in\n        values:\n        - "true"\n    - name: print-msg-2\n      params:\n      - name: random-num-Output\n        value: $(tasks.random-num.results.Output)\n      taskSpec:\n        steps:\n        - name: main\n          args:\n          - --msg\n          - heads and $(inputs.params.random-num-Output) <= 5!\n          command:\n          - sh\n          - -ec\n          - |\n            program_path=$(mktemp)\n            printf "%s" "$0" > "$program_path"\n            python3 -u "$program_path" "$@"\n          - |\n            def print_msg(msg):\n                """Print a message."""\n                print(msg)\n\n            import argparse\n            _parser = argparse.ArgumentParser(prog=\'Print msg\', description=\'Print a message.\')\n            _parser.add_argument("--msg", dest="msg", type=str, required=True, default=argparse.SUPPRESS)\n            _parsed_args = vars(_parser.parse_args())\n\n            _outputs = print_msg(**_parsed_args)\n          image: python:alpine3.6\n        params:\n        - name: random-num-Output\n        metadata:\n          labels:\n            pipelines.kubeflow.org/cache_enabled: "true"\n          annotations:\n            pipelines.kubeflow.org/component_spec_digest: \'{"name": "Print msg", "outputs":\n              [], "version": "Print msg@sha256=a13aed2f155afe0e8a1d1e29efc69b1cb1c3b170c45129f80ffe8d0a03a07861"}\'\n      when:\n      - input: $(tasks.condition-3.results.outcome)\n        operator: in\n        values:\n        - "true"\n    - name: random-num-2\n      taskSpec:\n        steps:\n        - name: main\n          args:\n          - --low\n          - \'10\'\n          - --high\n          - \'19\'\n          - \'----output-paths\'\n          - $(results.Output.path)\n          command:\n          - sh\n          - -ec\n          - |\n            program_path=$(mktemp)\n            printf "%s" "$0" > "$program_path"\n            python3 -u "$program_path" "$@"\n          - |\n            def random_num(low, high):\n                """Generate a random number between low and high."""\n                import random\n                result = random.randint(low, high)\n                print(result)\n                return result\n\n            def _serialize_int(int_value: int) -> str:\n                if isinstance(int_value, str):\n                    return int_value\n                if not isinstance(int_value, int):\n                    raise TypeError(\'Value "{}" has type "{}" instead of int.\'.format(\n                        str(int_value), str(type(int_value))))\n                return str(int_value)\n\n            import argparse\n            _parser = argparse.ArgumentParser(prog=\'Random num\', description=\'Generate a random number between low and high.\')\n            _parser.add_argument("--low", dest="low", type=int, required=True, default=argparse.SUPPRESS)\n            _parser.add_argument("--high", dest="high", type=int, required=True, default=argparse.SUPPRESS)\n            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)\n            _parsed_args = vars(_parser.parse_args())\n            _output_files = _parsed_args.pop("_output_paths", [])\n\n            _outputs = random_num(**_parsed_args)\n\n            _outputs = [_outputs]\n\n            _output_serializers = [\n                _serialize_int,\n\n            ]\n\n            import os\n            for idx, output_file in enumerate(_output_files):\n                try:\n                    os.makedirs(os.path.dirname(output_file))\n                except OSError:\n                    pass\n                with open(output_file, \'w\') as f:\n                    f.write(_output_serializers[idx](_outputs[idx]))\n          image: python:alpine3.6\n        results:\n        - name: Output\n          type: string\n          description: /tmp/outputs/Output/data\n        metadata:\n          labels:\n            pipelines.kubeflow.org/cache_enabled: "true"\n          annotations:\n            pipelines.kubeflow.org/component_spec_digest: \'{"name": "Random num",\n              "outputs": [{"name": "Output", "type": "Integer"}], "version": "Random\n              num@sha256=da6efc3f1c1ef51912b3964a64b773aa38436116bb83f188a1a57ea6f1e6a541"}\'\n      when:\n      - input: $(tasks.condition-4.results.outcome)\n        operator: in\n        values:\n        - "true"\n    - name: print-msg-3\n      params:\n      - name: random-num-2-Output\n        value: $(tasks.random-num-2.results.Output)\n      taskSpec:\n        steps:\n        - name: main\n          args:\n          - --msg\n          - tails and $(inputs.params.random-num-2-Output) > 15!\n          command:\n          - sh\n          - -ec\n          - |\n            program_path=$(mktemp)\n            printf "%s" "$0" > "$program_path"\n            python3 -u "$program_path" "$@"\n          - |\n            def print_msg(msg):\n                """Print a message."""\n                print(msg)\n\n            import argparse\n            _parser = argparse.ArgumentParser(prog=\'Print msg\', description=\'Print a message.\')\n            _parser.add_argument("--msg", dest="msg", type=str, required=True, default=argparse.SUPPRESS)\n            _parsed_args = vars(_parser.parse_args())\n\n            _outputs = print_msg(**_parsed_args)\n          image: python:alpine3.6\n        params:\n        - name: random-num-2-Output\n        metadata:\n          labels:\n            pipelines.kubeflow.org/cache_enabled: "true"\n          annotations:\n            pipelines.kubeflow.org/component_spec_digest: \'{"name": "Print msg", "outputs":\n              [], "version": "Print msg@sha256=a13aed2f155afe0e8a1d1e29efc69b1cb1c3b170c45129f80ffe8d0a03a07861"}\'\n      when:\n      - input: $(tasks.condition-5.results.outcome)\n        operator: in\n        values:\n        - "true"\n    - name: print-msg-4\n      params:\n      - name: random-num-2-Output\n        value: $(tasks.random-num-2.results.Output)\n      taskSpec:\n        steps:\n        - name: main\n          args:\n          - --msg\n          - tails and $(inputs.params.random-num-2-Output) <= 15!\n          command:\n          - sh\n          - -ec\n          - |\n            program_path=$(mktemp)\n            printf "%s" "$0" > "$program_path"\n            python3 -u "$program_path" "$@"\n          - |\n            def print_msg(msg):\n                """Print a message."""\n                print(msg)\n\n            import argparse\n            _parser = argparse.ArgumentParser(prog=\'Print msg\', description=\'Print a message.\')\n            _parser.add_argument("--msg", dest="msg", type=str, required=True, default=argparse.SUPPRESS)\n            _parsed_args = vars(_parser.parse_args())\n\n            _outputs = print_msg(**_parsed_args)\n          image: python:alpine3.6\n        params:\n        - name: random-num-2-Output\n        metadata:\n          labels:\n            pipelines.kubeflow.org/cache_enabled: "true"\n          annotations:\n            pipelines.kubeflow.org/component_spec_digest: \'{"name": "Print msg", "outputs":\n              [], "version": "Print msg@sha256=a13aed2f155afe0e8a1d1e29efc69b1cb1c3b170c45129f80ffe8d0a03a07861"}\'\n      when:\n      - input: $(tasks.condition-6.results.outcome)\n        operator: in\n        values:\n        - "true"\n    - name: condition-1\n      params:\n      - name: operand1\n        value: $(tasks.flip-coin.results.Output)\n      - name: operand2\n        value: heads\n      - name: operator\n        value: ==\n      taskSpec:\n        results:\n        - name: outcome\n          type: string\n          description: Conditional task outcome\n        params:\n        - name: operand1\n        - name: operand2\n        - name: operator\n        steps:\n        - name: main\n          command:\n          - sh\n          - -ec\n          - program_path=$(mktemp); printf "%s" "$0" > "$program_path";  python3 -u\n            "$program_path" "$1" "$2"\n          args:\n          - |\n            import sys\n            input1=str.rstrip(sys.argv[1])\n            input2=str.rstrip(sys.argv[2])\n            try:\n              input1=int(input1)\n              input2=int(input2)\n            except:\n              input1=str(input1)\n            outcome="true" if (input1 $(inputs.params.operator) input2) else "false"\n            f = open("/tekton/results/outcome", "w")\n            f.write(outcome)\n            f.close()\n          - $(inputs.params.operand1)\n          - $(inputs.params.operand2)\n          image: python:alpine3.6\n    - name: condition-2\n      params:\n      - name: operand1\n        value: $(tasks.random-num.results.Output)\n      - name: operand2\n        value: \'5\'\n      - name: operator\n        value: \'>\'\n      taskSpec:\n        results:\n        - name: outcome\n          type: string\n          description: Conditional task outcome\n        params:\n        - name: operand1\n        - name: operand2\n        - name: operator\n        steps:\n        - name: main\n          command:\n          - sh\n          - -ec\n          - program_path=$(mktemp); printf "%s" "$0" > "$program_path";  python3 -u\n            "$program_path" "$1" "$2"\n          args:\n          - |\n            import sys\n            input1=str.rstrip(sys.argv[1])\n            input2=str.rstrip(sys.argv[2])\n            try:\n              input1=int(input1)\n              input2=int(input2)\n            except:\n              input1=str(input1)\n            outcome="true" if (input1 $(inputs.params.operator) input2) else "false"\n            f = open("/tekton/results/outcome", "w")\n            f.write(outcome)\n            f.close()\n          - $(inputs.params.operand1)\n          - $(inputs.params.operand2)\n          image: python:alpine3.6\n      when:\n      - input: $(tasks.condition-1.results.outcome)\n        operator: in\n        values:\n        - "true"\n    - name: condition-3\n      params:\n      - name: operand1\n        value: $(tasks.random-num.results.Output)\n      - name: operand2\n        value: \'5\'\n      - name: operator\n        value: <=\n      taskSpec:\n        results:\n        - name: outcome\n          type: string\n          description: Conditional task outcome\n        params:\n        - name: operand1\n        - name: operand2\n        - name: operator\n        steps:\n        - name: main\n          command:\n          - sh\n          - -ec\n          - program_path=$(mktemp); printf "%s" "$0" > "$program_path";  python3 -u\n            "$program_path" "$1" "$2"\n          args:\n          - |\n            import sys\n            input1=str.rstrip(sys.argv[1])\n            input2=str.rstrip(sys.argv[2])\n            try:\n              input1=int(input1)\n              input2=int(input2)\n            except:\n              input1=str(input1)\n            outcome="true" if (input1 $(inputs.params.operator) input2) else "false"\n            f = open("/tekton/results/outcome", "w")\n            f.write(outcome)\n            f.close()\n          - $(inputs.params.operand1)\n          - $(inputs.params.operand2)\n          image: python:alpine3.6\n      when:\n      - input: $(tasks.condition-1.results.outcome)\n        operator: in\n        values:\n        - "true"\n    - name: condition-4\n      params:\n      - name: operand1\n        value: $(tasks.flip-coin.results.Output)\n      - name: operand2\n        value: tails\n      - name: operator\n        value: ==\n      taskSpec:\n        results:\n        - name: outcome\n          type: string\n          description: Conditional task outcome\n        params:\n        - name: operand1\n        - name: operand2\n        - name: operator\n        steps:\n        - name: main\n          command:\n          - sh\n          - -ec\n          - program_path=$(mktemp); printf "%s" "$0" > "$program_path";  python3 -u\n            "$program_path" "$1" "$2"\n          args:\n          - |\n            import sys\n            input1=str.rstrip(sys.argv[1])\n            input2=str.rstrip(sys.argv[2])\n            try:\n              input1=int(input1)\n              input2=int(input2)\n            except:\n              input1=str(input1)\n            outcome="true" if (input1 $(inputs.params.operator) input2) else "false"\n            f = open("/tekton/results/outcome", "w")\n            f.write(outcome)\n            f.close()\n          - $(inputs.params.operand1)\n          - $(inputs.params.operand2)\n          image: python:alpine3.6\n    - name: condition-5\n      params:\n      - name: operand1\n        value: $(tasks.random-num-2.results.Output)\n      - name: operand2\n        value: \'15\'\n      - name: operator\n        value: \'>\'\n      taskSpec:\n        results:\n        - name: outcome\n          type: string\n          description: Conditional task outcome\n        params:\n        - name: operand1\n        - name: operand2\n        - name: operator\n        steps:\n        - name: main\n          command:\n          - sh\n          - -ec\n          - program_path=$(mktemp); printf "%s" "$0" > "$program_path";  python3 -u\n            "$program_path" "$1" "$2"\n          args:\n          - |\n            import sys\n            input1=str.rstrip(sys.argv[1])\n            input2=str.rstrip(sys.argv[2])\n            try:\n              input1=int(input1)\n              input2=int(input2)\n            except:\n              input1=str(input1)\n            outcome="true" if (input1 $(inputs.params.operator) input2) else "false"\n            f = open("/tekton/results/outcome", "w")\n            f.write(outcome)\n            f.close()\n          - $(inputs.params.operand1)\n          - $(inputs.params.operand2)\n          image: python:alpine3.6\n      when:\n      - input: $(tasks.condition-4.results.outcome)\n        operator: in\n        values:\n        - "true"\n    - name: condition-6\n      params:\n      - name: operand1\n        value: $(tasks.random-num-2.results.Output)\n      - name: operand2\n        value: \'15\'\n      - name: operator\n        value: <=\n      taskSpec:\n        results:\n        - name: outcome\n          type: string\n          description: Conditional task outcome\n        params:\n        - name: operand1\n        - name: operand2\n        - name: operator\n        steps:\n        - name: main\n          command:\n          - sh\n          - -ec\n          - program_path=$(mktemp); printf "%s" "$0" > "$program_path";  python3 -u\n            "$program_path" "$1" "$2"\n          args:\n          - |\n            import sys\n            input1=str.rstrip(sys.argv[1])\n            input2=str.rstrip(sys.argv[2])\n            try:\n              input1=int(input1)\n              input2=int(input2)\n            except:\n              input1=str(input1)\n            outcome="true" if (input1 $(inputs.params.operator) input2) else "false"\n            f = open("/tekton/results/outcome", "w")\n            f.write(outcome)\n            f.close()\n          - $(inputs.params.operand1)\n          - $(inputs.params.operand2)\n          image: python:alpine3.6\n      when:\n      - input: $(tasks.condition-4.results.outcome)\n        operator: in\n        values:\n        - "true"\n',
  },
  service_account: 'pipeline-runner-pipelines-definition',
  created_at: '2024-01-25T15:58:18Z',
  scheduled_at: '1970-01-01T00:00:00Z',
  finished_at: '2024-01-25T15:59:16Z',
  status: 'Completed',
  ...run,
});

export const getMockRunResource = (run: PipelineRunKF): PipelineRunResourceKF => ({
  pipeline_runtime: {
    workflow_manifest:
      '{"metadata":{"name":"conditional-execution-pipeline-0858f","namespace":"mdas-test","uid":"b0e8f071-335e-4f28-ba82-745c05d2ba46","resourceVersion":"116393387","generation":1,"creationTimestamp":"2024-02-01T10:02:35Z","labels":{"custom.tekton.dev/originalPipelineRun":"conditional-execution-pipeline-0858f","pipeline/runid":"0858ffbf-b039-4fca-a672-2259336cf86f","pipelines.kubeflow.org/generation":"","pipelines.kubeflow.org/pipelinename":"","tekton.dev/pipeline":"conditional-execution-pipeline-0858f"},"annotations":{"chains.tekton.dev/signed":"true","pipelines.kubeflow.org/big_data_passing_format":"$(workspaces.$TASK_NAME.path)/artifacts/conditional-execution-pipeline-0858f/$TASKRUN_NAME/$TASK_PARAM_NAME","pipelines.kubeflow.org/pipeline_spec":"{\\"description\\": \\"Shows how to use dsl.Condition().\\", \\"name\\": \\"conditional-execution-pipeline\\"}","pipelines.kubeflow.org/run_name":"Duplicate of Duplicate of flip-coin run","sidecar.istio.io/inject":"false","tekton.dev/artifact_bucket":"mdas-pipeline","tekton.dev/artifact_endpoint":"https://s3.amazonaws.com","tekton.dev/artifact_endpoint_scheme":"http://","tekton.dev/artifact_items":"{\\"flip-coin\\": [[\\"Output\\", \\"$(results.Output.path)\\"]], \\"print-msg\\": [], \\"print-msg-2\\": [], \\"print-msg-3\\": [], \\"print-msg-4\\": [], \\"random-num\\": [[\\"Output\\", \\"$(results.Output.path)\\"]], \\"random-num-2\\": [[\\"Output\\", \\"$(results.Output.path)\\"]]}","tekton.dev/input_artifacts":"{\\"print-msg\\": [{\\"name\\": \\"random-num-Output\\", \\"parent_task\\": \\"random-num\\"}], \\"print-msg-2\\": [{\\"name\\": \\"random-num-Output\\", \\"parent_task\\": \\"random-num\\"}], \\"print-msg-3\\": [{\\"name\\": \\"random-num-2-Output\\", \\"parent_task\\": \\"random-num-2\\"}], \\"print-msg-4\\": [{\\"name\\": \\"random-num-2-Output\\", \\"parent_task\\": \\"random-num-2\\"}]}","tekton.dev/output_artifacts":"{\\"flip-coin\\": [{\\"key\\": \\"artifacts/$PIPELINERUN/flip-coin/Output.tgz\\", \\"name\\": \\"flip-coin-Output\\", \\"path\\": \\"/tmp/outputs/Output/data\\"}], \\"random-num\\": [{\\"key\\": \\"artifacts/$PIPELINERUN/random-num/Output.tgz\\", \\"name\\": \\"random-num-Output\\", \\"path\\": \\"/tmp/outputs/Output/data\\"}], \\"random-num-2\\": [{\\"key\\": \\"artifacts/$PIPELINERUN/random-num-2/Output.tgz\\", \\"name\\": \\"random-num-2-Output\\", \\"path\\": \\"/tmp/outputs/Output/data\\"}]}","tekton.dev/template":""},"finalizers":["chains.tekton.dev/pipelinerun"],"managedFields":[{"manager":"apiserver","operation":"Update","apiVersion":"tekton.dev/v1beta1","time":"2024-02-01T10:02:35Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{".":{},"f:pipelines.kubeflow.org/big_data_passing_format":{},"f:pipelines.kubeflow.org/pipeline_spec":{},"f:pipelines.kubeflow.org/run_name":{},"f:sidecar.istio.io/inject":{},"f:tekton.dev/artifact_bucket":{},"f:tekton.dev/artifact_endpoint":{},"f:tekton.dev/artifact_endpoint_scheme":{},"f:tekton.dev/artifact_items":{},"f:tekton.dev/input_artifacts":{},"f:tekton.dev/output_artifacts":{},"f:tekton.dev/template":{}},"f:labels":{".":{},"f:custom.tekton.dev/originalPipelineRun":{},"f:pipeline/runid":{},"f:pipelines.kubeflow.org/generation":{},"f:pipelines.kubeflow.org/pipelinename":{}}},"f:spec":{".":{},"f:pipelineSpec":{".":{},"f:tasks":{}},"f:serviceAccountName":{}}}},{"manager":"openshift-pipelines-controller","operation":"Update","apiVersion":"tekton.dev/v1","time":"2024-02-01T10:02:36Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:labels":{"f:tekton.dev/pipeline":{}}}}},{"manager":"openshift-pipelines-chains-controller","operation":"Update","apiVersion":"tekton.dev/v1beta1","time":"2024-02-01T10:03:10Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{"f:chains.tekton.dev/signed":{}},"f:finalizers":{".":{},"v:\\"chains.tekton.dev/pipelinerun\\"":{}}}}},{"manager":"openshift-pipelines-controller","operation":"Update","apiVersion":"tekton.dev/v1","time":"2024-02-01T10:03:10Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:childReferences":{},"f:completionTime":{},"f:conditions":{},"f:pipelineSpec":{".":{},"f:tasks":{}},"f:provenance":{".":{},"f:featureFlags":{".":{},"f:AwaitSidecarReadiness":{},"f:Coschedule":{},"f:DisableAffinityAssistant":{},"f:DisableCredsInit":{},"f:EnableAPIFields":{},"f:EnableProvenanceInStatus":{},"f:EnableTektonOCIBundles":{},"f:EnforceNonfalsifiability":{},"f:MaxResultSize":{},"f:RequireGitSSHSecretKnownHosts":{},"f:ResultExtractionMethod":{},"f:RunningInEnvWithInjectedSidecars":{},"f:ScopeWhenExpressionsToTask":{},"f:SendCloudEventsForRuns":{},"f:SetSecurityContext":{},"f:VerificationNoMatchPolicy":{}}},"f:skippedTasks":{},"f:startTime":{}}},"subresource":"status"}]},"spec":{"pipelineSpec":{"tasks":[{"name":"flip-coin","taskSpec":{"spec":null,"metadata":{"labels":{"pipelines.kubeflow.org/cache_enabled":"true"},"annotations":{"pipelines.kubeflow.org/component_spec_digest":"{\\"name\\": \\"Flip coin\\", \\"outputs\\": [{\\"name\\": \\"Output\\", \\"type\\": \\"String\\"}], \\"version\\": \\"Flip coin@sha256=83ef617eda2e04a688908716a02461237baee3cd04754ea99894e441b1f0679a\\"}"}},"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def flip_coin():\\n    \\"\\"\\"Flip a coin and output heads or tails randomly.\\"\\"\\"\\n    import random\\n    result = \'heads\' if random.randint(0, 1) == 0 else \'tails\'\\n    print(result)\\n    return result\\n\\ndef _serialize_str(str_value: str) -\\u003e str:\\n    if not isinstance(str_value, str):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of str.\'.format(\\n            str(str_value), str(type(str_value))))\\n    return str_value\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Flip coin\', description=\'Flip a coin and output heads or tails randomly.\')\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = flip_coin(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_str,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n"],"args":["----output-paths","$(results.Output.path)"],"resources":{}},{"name":"move-all-results-to-tekton-home","image":"registry.access.redhat.com/ubi8/ubi-micro@sha256:396baed3d689157d96aa7d8988fdfea7eb36684c8335eb391cf1952573e689c1","command":["sh","-c"],"args":["if [ -d /tekton/results ]; then mkdir -p /tekton/home/tep-results; mv /tekton/results/* /tekton/home/tep-results/ || true; fi\\n"],"resources":{}},{"name":"copy-artifacts","image":"quay.io/opendatahub/ds-pipelines-artifact-manager@sha256:db16085f67fd817088e7f6f592cf1b9c1558c56e0855303b3adea0b2fa18455f","command":["sh","-c"],"args":["#!/usr/bin/env sh\\npush_artifact() {\\n    workspace_dir=$(echo $(context.taskRun.name) | sed -e \\"s/$(context.pipeline.name)-//g\\")\\n    workspace_dest=/workspace/${workspace_dir}/artifacts/$(context.pipelineRun.name)/$(context.taskRun.name)\\n    artifact_name=$(basename $2)\\n    if [ -f \\"$workspace_dest/$artifact_name\\" ]; then\\n        echo sending to: ${workspace_dest}/${artifact_name}\\n        tar -cvzf $1.tgz -C ${workspace_dest} ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    elif [ -f \\"$2\\" ]; then\\n        tar -cvzf $1.tgz -C $(dirname $2) ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    else\\n        echo \\"$2 file does not exist. Skip artifact tracking for $1\\"\\n    fi\\n}\\npush_log() {\\n    cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log \\u003e step-main.log\\n    push_artifact main-log step-main.log\\n}\\nstrip_eof() {\\n    if [ -f \\"$2\\" ]; then\\n        awk \'NF\' $2 | head -c -1 \\u003e $1_temp_save \\u0026\\u0026 cp $1_temp_save $2\\n    fi\\n}\\npush_artifact \\"Output\\" \\"/tekton/home/tep-results/\\"$(basename \\"$(results.Output.path)\\")\\n"],"env":[{"name":"ARTIFACT_BUCKET","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_bucket\']"}}},{"name":"ARTIFACT_ENDPOINT","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint\']"}}},{"name":"ARTIFACT_ENDPOINT_SCHEME","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint_scheme\']"}}},{"name":"ARTIFACT_ITEMS","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_items\']"}}},{"name":"PIPELINETASK","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineTask\']"}}},{"name":"PIPELINERUN","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineRun\']"}}},{"name":"PODNAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"AWS_ACCESS_KEY_ID","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"accesskey"}}},{"name":"AWS_SECRET_ACCESS_KEY","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"secretkey"}}},{"name":"ARCHIVE_LOGS","value":"false"},{"name":"TRACK_ARTIFACTS","value":"true"},{"name":"STRIP_EOF","value":"true"}],"resources":{}}],"results":[{"name":"Output","type":"string","description":"/tmp/outputs/Output/data"}]}},{"name":"random-num","taskSpec":{"spec":null,"metadata":{"labels":{"pipelines.kubeflow.org/cache_enabled":"true"},"annotations":{"pipelines.kubeflow.org/component_spec_digest":"{\\"name\\": \\"Random num\\", \\"outputs\\": [{\\"name\\": \\"Output\\", \\"type\\": \\"Integer\\"}], \\"version\\": \\"Random num@sha256=da6efc3f1c1ef51912b3964a64b773aa38436116bb83f188a1a57ea6f1e6a541\\"}"}},"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def random_num(low, high):\\n    \\"\\"\\"Generate a random number between low and high.\\"\\"\\"\\n    import random\\n    result = random.randint(low, high)\\n    print(result)\\n    return result\\n\\ndef _serialize_int(int_value: int) -\\u003e str:\\n    if isinstance(int_value, str):\\n        return int_value\\n    if not isinstance(int_value, int):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of int.\'.format(\\n            str(int_value), str(type(int_value))))\\n    return str(int_value)\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Random num\', description=\'Generate a random number between low and high.\')\\n_parser.add_argument(\\"--low\\", dest=\\"low\\", type=int, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"--high\\", dest=\\"high\\", type=int, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = random_num(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_int,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n"],"args":["--low","0","--high","9","----output-paths","$(results.Output.path)"],"resources":{}},{"name":"move-all-results-to-tekton-home","image":"registry.access.redhat.com/ubi8/ubi-micro@sha256:396baed3d689157d96aa7d8988fdfea7eb36684c8335eb391cf1952573e689c1","command":["sh","-c"],"args":["if [ -d /tekton/results ]; then mkdir -p /tekton/home/tep-results; mv /tekton/results/* /tekton/home/tep-results/ || true; fi\\n"],"resources":{}},{"name":"copy-artifacts","image":"quay.io/opendatahub/ds-pipelines-artifact-manager@sha256:db16085f67fd817088e7f6f592cf1b9c1558c56e0855303b3adea0b2fa18455f","command":["sh","-c"],"args":["#!/usr/bin/env sh\\npush_artifact() {\\n    workspace_dir=$(echo $(context.taskRun.name) | sed -e \\"s/$(context.pipeline.name)-//g\\")\\n    workspace_dest=/workspace/${workspace_dir}/artifacts/$(context.pipelineRun.name)/$(context.taskRun.name)\\n    artifact_name=$(basename $2)\\n    if [ -f \\"$workspace_dest/$artifact_name\\" ]; then\\n        echo sending to: ${workspace_dest}/${artifact_name}\\n        tar -cvzf $1.tgz -C ${workspace_dest} ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    elif [ -f \\"$2\\" ]; then\\n        tar -cvzf $1.tgz -C $(dirname $2) ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    else\\n        echo \\"$2 file does not exist. Skip artifact tracking for $1\\"\\n    fi\\n}\\npush_log() {\\n    cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log \\u003e step-main.log\\n    push_artifact main-log step-main.log\\n}\\nstrip_eof() {\\n    if [ -f \\"$2\\" ]; then\\n        awk \'NF\' $2 | head -c -1 \\u003e $1_temp_save \\u0026\\u0026 cp $1_temp_save $2\\n    fi\\n}\\npush_artifact \\"Output\\" \\"/tekton/home/tep-results/\\"$(basename \\"$(results.Output.path)\\")\\n"],"env":[{"name":"ARTIFACT_BUCKET","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_bucket\']"}}},{"name":"ARTIFACT_ENDPOINT","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint\']"}}},{"name":"ARTIFACT_ENDPOINT_SCHEME","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint_scheme\']"}}},{"name":"ARTIFACT_ITEMS","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_items\']"}}},{"name":"PIPELINETASK","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineTask\']"}}},{"name":"PIPELINERUN","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineRun\']"}}},{"name":"PODNAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"AWS_ACCESS_KEY_ID","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"accesskey"}}},{"name":"AWS_SECRET_ACCESS_KEY","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"secretkey"}}},{"name":"ARCHIVE_LOGS","value":"false"},{"name":"TRACK_ARTIFACTS","value":"true"},{"name":"STRIP_EOF","value":"true"}],"resources":{}}],"results":[{"name":"Output","type":"string","description":"/tmp/outputs/Output/data"}]},"when":[{"input":"$(tasks.condition-1.results.outcome)","operator":"in","values":["true"]}]},{"name":"print-msg","taskSpec":{"spec":null,"metadata":{"labels":{"pipelines.kubeflow.org/cache_enabled":"true"},"annotations":{"pipelines.kubeflow.org/component_spec_digest":"{\\"name\\": \\"Print msg\\", \\"outputs\\": [], \\"version\\": \\"Print msg@sha256=a13aed2f155afe0e8a1d1e29efc69b1cb1c3b170c45129f80ffe8d0a03a07861\\"}"}},"params":[{"name":"random-num-Output","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def print_msg(msg):\\n    \\"\\"\\"Print a message.\\"\\"\\"\\n    print(msg)\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Print msg\', description=\'Print a message.\')\\n_parser.add_argument(\\"--msg\\", dest=\\"msg\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parsed_args = vars(_parser.parse_args())\\n\\n_outputs = print_msg(**_parsed_args)\\n"],"args":["--msg","heads and $(inputs.params.random-num-Output) \\u003e 5!"],"resources":{}}]},"when":[{"input":"$(tasks.condition-2.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"random-num-Output","value":"$(tasks.random-num.results.Output)"}]},{"name":"print-msg-2","taskSpec":{"spec":null,"metadata":{"labels":{"pipelines.kubeflow.org/cache_enabled":"true"},"annotations":{"pipelines.kubeflow.org/component_spec_digest":"{\\"name\\": \\"Print msg\\", \\"outputs\\": [], \\"version\\": \\"Print msg@sha256=a13aed2f155afe0e8a1d1e29efc69b1cb1c3b170c45129f80ffe8d0a03a07861\\"}"}},"params":[{"name":"random-num-Output","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def print_msg(msg):\\n    \\"\\"\\"Print a message.\\"\\"\\"\\n    print(msg)\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Print msg\', description=\'Print a message.\')\\n_parser.add_argument(\\"--msg\\", dest=\\"msg\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parsed_args = vars(_parser.parse_args())\\n\\n_outputs = print_msg(**_parsed_args)\\n"],"args":["--msg","heads and $(inputs.params.random-num-Output) \\u003c= 5!"],"resources":{}}]},"when":[{"input":"$(tasks.condition-3.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"random-num-Output","value":"$(tasks.random-num.results.Output)"}]},{"name":"random-num-2","taskSpec":{"spec":null,"metadata":{"labels":{"pipelines.kubeflow.org/cache_enabled":"true"},"annotations":{"pipelines.kubeflow.org/component_spec_digest":"{\\"name\\": \\"Random num\\", \\"outputs\\": [{\\"name\\": \\"Output\\", \\"type\\": \\"Integer\\"}], \\"version\\": \\"Random num@sha256=da6efc3f1c1ef51912b3964a64b773aa38436116bb83f188a1a57ea6f1e6a541\\"}"}},"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def random_num(low, high):\\n    \\"\\"\\"Generate a random number between low and high.\\"\\"\\"\\n    import random\\n    result = random.randint(low, high)\\n    print(result)\\n    return result\\n\\ndef _serialize_int(int_value: int) -\\u003e str:\\n    if isinstance(int_value, str):\\n        return int_value\\n    if not isinstance(int_value, int):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of int.\'.format(\\n            str(int_value), str(type(int_value))))\\n    return str(int_value)\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Random num\', description=\'Generate a random number between low and high.\')\\n_parser.add_argument(\\"--low\\", dest=\\"low\\", type=int, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"--high\\", dest=\\"high\\", type=int, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = random_num(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_int,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n"],"args":["--low","10","--high","19","----output-paths","$(results.Output.path)"],"resources":{}},{"name":"move-all-results-to-tekton-home","image":"registry.access.redhat.com/ubi8/ubi-micro@sha256:396baed3d689157d96aa7d8988fdfea7eb36684c8335eb391cf1952573e689c1","command":["sh","-c"],"args":["if [ -d /tekton/results ]; then mkdir -p /tekton/home/tep-results; mv /tekton/results/* /tekton/home/tep-results/ || true; fi\\n"],"resources":{}},{"name":"copy-artifacts","image":"quay.io/opendatahub/ds-pipelines-artifact-manager@sha256:db16085f67fd817088e7f6f592cf1b9c1558c56e0855303b3adea0b2fa18455f","command":["sh","-c"],"args":["#!/usr/bin/env sh\\npush_artifact() {\\n    workspace_dir=$(echo $(context.taskRun.name) | sed -e \\"s/$(context.pipeline.name)-//g\\")\\n    workspace_dest=/workspace/${workspace_dir}/artifacts/$(context.pipelineRun.name)/$(context.taskRun.name)\\n    artifact_name=$(basename $2)\\n    if [ -f \\"$workspace_dest/$artifact_name\\" ]; then\\n        echo sending to: ${workspace_dest}/${artifact_name}\\n        tar -cvzf $1.tgz -C ${workspace_dest} ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    elif [ -f \\"$2\\" ]; then\\n        tar -cvzf $1.tgz -C $(dirname $2) ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    else\\n        echo \\"$2 file does not exist. Skip artifact tracking for $1\\"\\n    fi\\n}\\npush_log() {\\n    cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log \\u003e step-main.log\\n    push_artifact main-log step-main.log\\n}\\nstrip_eof() {\\n    if [ -f \\"$2\\" ]; then\\n        awk \'NF\' $2 | head -c -1 \\u003e $1_temp_save \\u0026\\u0026 cp $1_temp_save $2\\n    fi\\n}\\npush_artifact \\"Output\\" \\"/tekton/home/tep-results/\\"$(basename \\"$(results.Output.path)\\")\\n"],"env":[{"name":"ARTIFACT_BUCKET","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_bucket\']"}}},{"name":"ARTIFACT_ENDPOINT","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint\']"}}},{"name":"ARTIFACT_ENDPOINT_SCHEME","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint_scheme\']"}}},{"name":"ARTIFACT_ITEMS","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_items\']"}}},{"name":"PIPELINETASK","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineTask\']"}}},{"name":"PIPELINERUN","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineRun\']"}}},{"name":"PODNAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"AWS_ACCESS_KEY_ID","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"accesskey"}}},{"name":"AWS_SECRET_ACCESS_KEY","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"secretkey"}}},{"name":"ARCHIVE_LOGS","value":"false"},{"name":"TRACK_ARTIFACTS","value":"true"},{"name":"STRIP_EOF","value":"true"}],"resources":{}}],"results":[{"name":"Output","type":"string","description":"/tmp/outputs/Output/data"}]},"when":[{"input":"$(tasks.condition-4.results.outcome)","operator":"in","values":["true"]}]},{"name":"print-msg-3","taskSpec":{"spec":null,"metadata":{"labels":{"pipelines.kubeflow.org/cache_enabled":"true"},"annotations":{"pipelines.kubeflow.org/component_spec_digest":"{\\"name\\": \\"Print msg\\", \\"outputs\\": [], \\"version\\": \\"Print msg@sha256=a13aed2f155afe0e8a1d1e29efc69b1cb1c3b170c45129f80ffe8d0a03a07861\\"}"}},"params":[{"name":"random-num-2-Output","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def print_msg(msg):\\n    \\"\\"\\"Print a message.\\"\\"\\"\\n    print(msg)\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Print msg\', description=\'Print a message.\')\\n_parser.add_argument(\\"--msg\\", dest=\\"msg\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parsed_args = vars(_parser.parse_args())\\n\\n_outputs = print_msg(**_parsed_args)\\n"],"args":["--msg","tails and $(inputs.params.random-num-2-Output) \\u003e 15!"],"resources":{}}]},"when":[{"input":"$(tasks.condition-5.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"random-num-2-Output","value":"$(tasks.random-num-2.results.Output)"}]},{"name":"print-msg-4","taskSpec":{"spec":null,"metadata":{"labels":{"pipelines.kubeflow.org/cache_enabled":"true"},"annotations":{"pipelines.kubeflow.org/component_spec_digest":"{\\"name\\": \\"Print msg\\", \\"outputs\\": [], \\"version\\": \\"Print msg@sha256=a13aed2f155afe0e8a1d1e29efc69b1cb1c3b170c45129f80ffe8d0a03a07861\\"}"}},"params":[{"name":"random-num-2-Output","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def print_msg(msg):\\n    \\"\\"\\"Print a message.\\"\\"\\"\\n    print(msg)\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Print msg\', description=\'Print a message.\')\\n_parser.add_argument(\\"--msg\\", dest=\\"msg\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parsed_args = vars(_parser.parse_args())\\n\\n_outputs = print_msg(**_parsed_args)\\n"],"args":["--msg","tails and $(inputs.params.random-num-2-Output) \\u003c= 15!"],"resources":{}}]},"when":[{"input":"$(tasks.condition-6.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"random-num-2-Output","value":"$(tasks.random-num-2.results.Output)"}]},{"name":"condition-1","taskSpec":{"spec":null,"metadata":{},"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 $(inputs.params.operator) input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","$(inputs.params.operand1)","$(inputs.params.operand2)"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"params":[{"name":"operand1","value":"$(tasks.flip-coin.results.Output)"},{"name":"operand2","value":"heads"},{"name":"operator","value":"=="}]},{"name":"condition-2","taskSpec":{"spec":null,"metadata":{},"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 $(inputs.params.operator) input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","$(inputs.params.operand1)","$(inputs.params.operand2)"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"when":[{"input":"$(tasks.condition-1.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"operand1","value":"$(tasks.random-num.results.Output)"},{"name":"operand2","value":"5"},{"name":"operator","value":"\\u003e"}]},{"name":"condition-3","taskSpec":{"spec":null,"metadata":{},"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 $(inputs.params.operator) input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","$(inputs.params.operand1)","$(inputs.params.operand2)"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"when":[{"input":"$(tasks.condition-1.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"operand1","value":"$(tasks.random-num.results.Output)"},{"name":"operand2","value":"5"},{"name":"operator","value":"\\u003c="}]},{"name":"condition-4","taskSpec":{"spec":null,"metadata":{},"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 $(inputs.params.operator) input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","$(inputs.params.operand1)","$(inputs.params.operand2)"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"params":[{"name":"operand1","value":"$(tasks.flip-coin.results.Output)"},{"name":"operand2","value":"tails"},{"name":"operator","value":"=="}]},{"name":"condition-5","taskSpec":{"spec":null,"metadata":{},"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 $(inputs.params.operator) input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","$(inputs.params.operand1)","$(inputs.params.operand2)"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"when":[{"input":"$(tasks.condition-4.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"operand1","value":"$(tasks.random-num-2.results.Output)"},{"name":"operand2","value":"15"},{"name":"operator","value":"\\u003e"}]},{"name":"condition-6","taskSpec":{"spec":null,"metadata":{},"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 $(inputs.params.operator) input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","$(inputs.params.operand1)","$(inputs.params.operand2)"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"when":[{"input":"$(tasks.condition-4.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"operand1","value":"$(tasks.random-num-2.results.Output)"},{"name":"operand2","value":"15"},{"name":"operator","value":"\\u003c="}]}]},"serviceAccountName":"pipeline-runner-pipelines-definition","timeouts":{"pipeline":"1h0m0s"}},"status":{"conditions":[{"type":"Succeeded","status":"True","lastTransitionTime":"2024-02-01T10:03:10Z","reason":"Completed","message":"Tasks Completed: 7 (Failed: 0, Cancelled 0), Skipped: 6"}],"startTime":"2024-02-01T10:02:35Z","completionTime":"2024-02-01T10:03:10Z","taskRuns":{"conditional-execution-pipeline-0858f-condition-1":{"pipelineTaskName":"condition-1","status":{"conditions":[{"type":"Succeeded","status":"True","lastTransitionTime":"2024-02-01T10:02:48Z","reason":"Succeeded","message":"All Steps have completed executing"}],"podName":"conditional-execution-pipeline-0858f-condition-1-pod","startTime":"2024-02-01T10:02:42Z","completionTime":"2024-02-01T10:02:48Z","steps":[{"terminated":{"exitCode":0,"reason":"Completed","message":"[{\\"key\\":\\"outcome\\",\\"value\\":\\"true\\",\\"type\\":1}]","startedAt":"2024-02-01T10:02:47Z","finishedAt":"2024-02-01T10:02:48Z","containerID":"cri-o://fc23ddc9688f1940d15a8cf235033b14fe73146c53843508215d4cfd1cbf1eaa"},"name":"main","container":"step-main","imageID":"docker.io/library/python@sha256:27ef9872c5526eb9d8a4377d7eaf33d178cb2109eb7e29ea205478b9b11d9914"}],"taskResults":[{"name":"outcome","type":"string","value":"true"}],"taskSpec":{"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 == input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","heads","heads"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"provenance":{}}},"conditional-execution-pipeline-0858f-condition-2":{"pipelineTaskName":"condition-2","status":{"conditions":[{"type":"Succeeded","status":"True","lastTransitionTime":"2024-02-01T10:03:03Z","reason":"Succeeded","message":"All Steps have completed executing"}],"podName":"conditional-execution-pipeline-0858f-condition-2-pod","startTime":"2024-02-01T10:02:58Z","completionTime":"2024-02-01T10:03:03Z","steps":[{"terminated":{"exitCode":0,"reason":"Completed","message":"[{\\"key\\":\\"outcome\\",\\"value\\":\\"true\\",\\"type\\":1}]","startedAt":"2024-02-01T10:03:03Z","finishedAt":"2024-02-01T10:03:03Z","containerID":"cri-o://87a2b87b19d9dc6157e3f5a192cdf36b30670037f6502e0db00b14d6d2003a40"},"name":"main","container":"step-main","imageID":"docker.io/library/python@sha256:27ef9872c5526eb9d8a4377d7eaf33d178cb2109eb7e29ea205478b9b11d9914"}],"taskResults":[{"name":"outcome","type":"string","value":"true"}],"taskSpec":{"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 \\u003e input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","6","5"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"provenance":{}}},"conditional-execution-pipeline-0858f-condition-3":{"pipelineTaskName":"condition-3","status":{"conditions":[{"type":"Succeeded","status":"True","lastTransitionTime":"2024-02-01T10:03:04Z","reason":"Succeeded","message":"All Steps have completed executing"}],"podName":"conditional-execution-pipeline-0858f-condition-3-pod","startTime":"2024-02-01T10:02:58Z","completionTime":"2024-02-01T10:03:04Z","steps":[{"terminated":{"exitCode":0,"reason":"Completed","message":"[{\\"key\\":\\"outcome\\",\\"value\\":\\"false\\",\\"type\\":1}]","startedAt":"2024-02-01T10:03:04Z","finishedAt":"2024-02-01T10:03:04Z","containerID":"cri-o://dfcd087193b3f15dc35c6aba4e8b9aa7ca67d03617cdc89cb673130f3292aefe"},"name":"main","container":"step-main","imageID":"docker.io/library/python@sha256:27ef9872c5526eb9d8a4377d7eaf33d178cb2109eb7e29ea205478b9b11d9914"}],"taskResults":[{"name":"outcome","type":"string","value":"false"}],"taskSpec":{"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 \\u003c= input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","6","5"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"provenance":{}}},"conditional-execution-pipeline-0858f-condition-4":{"pipelineTaskName":"condition-4","status":{"conditions":[{"type":"Succeeded","status":"True","lastTransitionTime":"2024-02-01T10:02:48Z","reason":"Succeeded","message":"All Steps have completed executing"}],"podName":"conditional-execution-pipeline-0858f-condition-4-pod","startTime":"2024-02-01T10:02:42Z","completionTime":"2024-02-01T10:02:48Z","steps":[{"terminated":{"exitCode":0,"reason":"Completed","message":"[{\\"key\\":\\"outcome\\",\\"value\\":\\"false\\",\\"type\\":1}]","startedAt":"2024-02-01T10:02:47Z","finishedAt":"2024-02-01T10:02:48Z","containerID":"cri-o://4c6eac4550f8bc2f98305b59659a9e6214ffd48a75619aaec2dedcf4919e181b"},"name":"main","container":"step-main","imageID":"docker.io/library/python@sha256:27ef9872c5526eb9d8a4377d7eaf33d178cb2109eb7e29ea205478b9b11d9914"}],"taskResults":[{"name":"outcome","type":"string","value":"false"}],"taskSpec":{"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 == input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","heads","tails"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"provenance":{}}},"conditional-execution-pipeline-0858f-flip-coin":{"pipelineTaskName":"flip-coin","status":{"conditions":[{"type":"Succeeded","status":"True","lastTransitionTime":"2024-02-01T10:02:42Z","reason":"Succeeded","message":"All Steps have completed executing"}],"podName":"conditional-execution-pipeline-0858f-flip-coin-pod","startTime":"2024-02-01T10:02:35Z","completionTime":"2024-02-01T10:02:42Z","steps":[{"terminated":{"exitCode":0,"reason":"Completed","message":"[{\\"key\\":\\"Output\\",\\"value\\":\\"heads\\",\\"type\\":1}]","startedAt":"2024-02-01T10:02:38Z","finishedAt":"2024-02-01T10:02:39Z","containerID":"cri-o://86c9fb4cf66876a862bbf972e88bca024db8dc28946798f4f10eb01f61d79c70"},"name":"main","container":"step-main","imageID":"docker.io/library/python@sha256:27ef9872c5526eb9d8a4377d7eaf33d178cb2109eb7e29ea205478b9b11d9914"},{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2024-02-01T10:02:40Z","finishedAt":"2024-02-01T10:02:40Z","containerID":"cri-o://3a0f51bce3e82a9d495be1a760fa1bdc312809abba07c1a5814e0e3852f46234"},"name":"move-all-results-to-tekton-home","container":"step-move-all-results-to-tekton-home","imageID":"registry.access.redhat.com/ubi8/ubi-micro@sha256:396baed3d689157d96aa7d8988fdfea7eb36684c8335eb391cf1952573e689c1"},{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2024-02-01T10:02:40Z","finishedAt":"2024-02-01T10:02:41Z","containerID":"cri-o://04f71c7f2877291355668b4a75953b792fb1ac7424263907ad2c8a37bb48a0d1"},"name":"copy-artifacts","container":"step-copy-artifacts","imageID":"quay.io/opendatahub/ds-pipelines-artifact-manager@sha256:db16085f67fd817088e7f6f592cf1b9c1558c56e0855303b3adea0b2fa18455f"}],"taskResults":[{"name":"Output","type":"string","value":"heads"}],"taskSpec":{"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def flip_coin():\\n    \\"\\"\\"Flip a coin and output heads or tails randomly.\\"\\"\\"\\n    import random\\n    result = \'heads\' if random.randint(0, 1) == 0 else \'tails\'\\n    print(result)\\n    return result\\n\\ndef _serialize_str(str_value: str) -\\u003e str:\\n    if not isinstance(str_value, str):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of str.\'.format(\\n            str(str_value), str(type(str_value))))\\n    return str_value\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Flip coin\', description=\'Flip a coin and output heads or tails randomly.\')\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = flip_coin(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_str,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n"],"args":["----output-paths","/tekton/results/Output"],"resources":{}},{"name":"move-all-results-to-tekton-home","image":"registry.access.redhat.com/ubi8/ubi-micro@sha256:396baed3d689157d96aa7d8988fdfea7eb36684c8335eb391cf1952573e689c1","command":["sh","-c"],"args":["if [ -d /tekton/results ]; then mkdir -p /tekton/home/tep-results; mv /tekton/results/* /tekton/home/tep-results/ || true; fi\\n"],"resources":{}},{"name":"copy-artifacts","image":"quay.io/opendatahub/ds-pipelines-artifact-manager@sha256:db16085f67fd817088e7f6f592cf1b9c1558c56e0855303b3adea0b2fa18455f","command":["sh","-c"],"args":["#!/usr/bin/env sh\\npush_artifact() {\\n    workspace_dir=$(echo conditional-execution-pipeline-0858f-flip-coin | sed -e \\"s/conditional-execution-pipeline-0858f-//g\\")\\n    workspace_dest=/workspace/${workspace_dir}/artifacts/conditional-execution-pipeline-0858f/conditional-execution-pipeline-0858f-flip-coin\\n    artifact_name=$(basename $2)\\n    if [ -f \\"$workspace_dest/$artifact_name\\" ]; then\\n        echo sending to: ${workspace_dest}/${artifact_name}\\n        tar -cvzf $1.tgz -C ${workspace_dest} ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    elif [ -f \\"$2\\" ]; then\\n        tar -cvzf $1.tgz -C $(dirname $2) ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    else\\n        echo \\"$2 file does not exist. Skip artifact tracking for $1\\"\\n    fi\\n}\\npush_log() {\\n    cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log \\u003e step-main.log\\n    push_artifact main-log step-main.log\\n}\\nstrip_eof() {\\n    if [ -f \\"$2\\" ]; then\\n        awk \'NF\' $2 | head -c -1 \\u003e $1_temp_save \\u0026\\u0026 cp $1_temp_save $2\\n    fi\\n}\\npush_artifact \\"Output\\" \\"/tekton/home/tep-results/\\"$(basename \\"/tekton/results/Output\\")\\n"],"env":[{"name":"ARTIFACT_BUCKET","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_bucket\']"}}},{"name":"ARTIFACT_ENDPOINT","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint\']"}}},{"name":"ARTIFACT_ENDPOINT_SCHEME","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint_scheme\']"}}},{"name":"ARTIFACT_ITEMS","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_items\']"}}},{"name":"PIPELINETASK","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineTask\']"}}},{"name":"PIPELINERUN","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineRun\']"}}},{"name":"PODNAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"AWS_ACCESS_KEY_ID","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"accesskey"}}},{"name":"AWS_SECRET_ACCESS_KEY","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"secretkey"}}},{"name":"ARCHIVE_LOGS","value":"false"},{"name":"TRACK_ARTIFACTS","value":"true"},{"name":"STRIP_EOF","value":"true"}],"resources":{}}],"results":[{"name":"Output","type":"string","description":"/tmp/outputs/Output/data"}]},"provenance":{}}},"conditional-execution-pipeline-0858f-print-msg":{"pipelineTaskName":"print-msg","status":{"conditions":[{"type":"Succeeded","status":"True","lastTransitionTime":"2024-02-01T10:03:09Z","reason":"Succeeded","message":"All Steps have completed executing"}],"podName":"conditional-execution-pipeline-0858f-print-msg-pod","startTime":"2024-02-01T10:03:04Z","completionTime":"2024-02-01T10:03:09Z","steps":[{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2024-02-01T10:03:09Z","finishedAt":"2024-02-01T10:03:09Z","containerID":"cri-o://e1c7350cd2672f4556dd4e8741ee4577714b35aca44e4af3d47fc7ad63af270e"},"name":"main","container":"step-main","imageID":"docker.io/library/python@sha256:27ef9872c5526eb9d8a4377d7eaf33d178cb2109eb7e29ea205478b9b11d9914"}],"taskSpec":{"params":[{"name":"random-num-Output","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def print_msg(msg):\\n    \\"\\"\\"Print a message.\\"\\"\\"\\n    print(msg)\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Print msg\', description=\'Print a message.\')\\n_parser.add_argument(\\"--msg\\", dest=\\"msg\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parsed_args = vars(_parser.parse_args())\\n\\n_outputs = print_msg(**_parsed_args)\\n"],"args":["--msg","heads and 6 \\u003e 5!"],"resources":{}}]},"provenance":{}}},"conditional-execution-pipeline-0858f-random-num":{"pipelineTaskName":"random-num","status":{"conditions":[{"type":"Succeeded","status":"True","lastTransitionTime":"2024-02-01T10:02:57Z","reason":"Succeeded","message":"All Steps have completed executing"}],"podName":"conditional-execution-pipeline-0858f-random-num-pod","startTime":"2024-02-01T10:02:48Z","completionTime":"2024-02-01T10:02:57Z","steps":[{"terminated":{"exitCode":0,"reason":"Completed","message":"[{\\"key\\":\\"Output\\",\\"value\\":\\"6\\",\\"type\\":1}]","startedAt":"2024-02-01T10:02:54Z","finishedAt":"2024-02-01T10:02:54Z","containerID":"cri-o://b02cdff436d0e966ca0aecd24bff175f36986d17529a71fa5862bc08f1011b82"},"name":"main","container":"step-main","imageID":"docker.io/library/python@sha256:27ef9872c5526eb9d8a4377d7eaf33d178cb2109eb7e29ea205478b9b11d9914"},{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2024-02-01T10:02:55Z","finishedAt":"2024-02-01T10:02:55Z","containerID":"cri-o://c5da12eae23ce8a902ac229cc3dd6bdd76ff5f2958c9d6264fe5cdb7edd39f55"},"name":"move-all-results-to-tekton-home","container":"step-move-all-results-to-tekton-home","imageID":"registry.access.redhat.com/ubi8/ubi-micro@sha256:396baed3d689157d96aa7d8988fdfea7eb36684c8335eb391cf1952573e689c1"},{"terminated":{"exitCode":0,"reason":"Completed","startedAt":"2024-02-01T10:02:55Z","finishedAt":"2024-02-01T10:02:56Z","containerID":"cri-o://b86c5dc245bf55972339fde889e5e853fed87b6ebaf89543fe5b6e01000ec821"},"name":"copy-artifacts","container":"step-copy-artifacts","imageID":"quay.io/opendatahub/ds-pipelines-artifact-manager@sha256:db16085f67fd817088e7f6f592cf1b9c1558c56e0855303b3adea0b2fa18455f"}],"taskResults":[{"name":"Output","type":"string","value":"6"}],"taskSpec":{"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def random_num(low, high):\\n    \\"\\"\\"Generate a random number between low and high.\\"\\"\\"\\n    import random\\n    result = random.randint(low, high)\\n    print(result)\\n    return result\\n\\ndef _serialize_int(int_value: int) -\\u003e str:\\n    if isinstance(int_value, str):\\n        return int_value\\n    if not isinstance(int_value, int):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of int.\'.format(\\n            str(int_value), str(type(int_value))))\\n    return str(int_value)\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Random num\', description=\'Generate a random number between low and high.\')\\n_parser.add_argument(\\"--low\\", dest=\\"low\\", type=int, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"--high\\", dest=\\"high\\", type=int, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = random_num(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_int,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n"],"args":["--low","0","--high","9","----output-paths","/tekton/results/Output"],"resources":{}},{"name":"move-all-results-to-tekton-home","image":"registry.access.redhat.com/ubi8/ubi-micro@sha256:396baed3d689157d96aa7d8988fdfea7eb36684c8335eb391cf1952573e689c1","command":["sh","-c"],"args":["if [ -d /tekton/results ]; then mkdir -p /tekton/home/tep-results; mv /tekton/results/* /tekton/home/tep-results/ || true; fi\\n"],"resources":{}},{"name":"copy-artifacts","image":"quay.io/opendatahub/ds-pipelines-artifact-manager@sha256:db16085f67fd817088e7f6f592cf1b9c1558c56e0855303b3adea0b2fa18455f","command":["sh","-c"],"args":["#!/usr/bin/env sh\\npush_artifact() {\\n    workspace_dir=$(echo conditional-execution-pipeline-0858f-random-num | sed -e \\"s/conditional-execution-pipeline-0858f-//g\\")\\n    workspace_dest=/workspace/${workspace_dir}/artifacts/conditional-execution-pipeline-0858f/conditional-execution-pipeline-0858f-random-num\\n    artifact_name=$(basename $2)\\n    if [ -f \\"$workspace_dest/$artifact_name\\" ]; then\\n        echo sending to: ${workspace_dest}/${artifact_name}\\n        tar -cvzf $1.tgz -C ${workspace_dest} ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    elif [ -f \\"$2\\" ]; then\\n        tar -cvzf $1.tgz -C $(dirname $2) ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    else\\n        echo \\"$2 file does not exist. Skip artifact tracking for $1\\"\\n    fi\\n}\\npush_log() {\\n    cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log \\u003e step-main.log\\n    push_artifact main-log step-main.log\\n}\\nstrip_eof() {\\n    if [ -f \\"$2\\" ]; then\\n        awk \'NF\' $2 | head -c -1 \\u003e $1_temp_save \\u0026\\u0026 cp $1_temp_save $2\\n    fi\\n}\\npush_artifact \\"Output\\" \\"/tekton/home/tep-results/\\"$(basename \\"/tekton/results/Output\\")\\n"],"env":[{"name":"ARTIFACT_BUCKET","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_bucket\']"}}},{"name":"ARTIFACT_ENDPOINT","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint\']"}}},{"name":"ARTIFACT_ENDPOINT_SCHEME","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint_scheme\']"}}},{"name":"ARTIFACT_ITEMS","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_items\']"}}},{"name":"PIPELINETASK","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineTask\']"}}},{"name":"PIPELINERUN","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineRun\']"}}},{"name":"PODNAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"AWS_ACCESS_KEY_ID","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"accesskey"}}},{"name":"AWS_SECRET_ACCESS_KEY","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"secretkey"}}},{"name":"ARCHIVE_LOGS","value":"false"},{"name":"TRACK_ARTIFACTS","value":"true"},{"name":"STRIP_EOF","value":"true"}],"resources":{}}],"results":[{"name":"Output","type":"string","description":"/tmp/outputs/Output/data"}]},"provenance":{}}}},"pipelineSpec":{"tasks":[{"name":"flip-coin","taskSpec":{"spec":null,"metadata":{"labels":{"pipelines.kubeflow.org/cache_enabled":"true"},"annotations":{"pipelines.kubeflow.org/component_spec_digest":"{\\"name\\": \\"Flip coin\\", \\"outputs\\": [{\\"name\\": \\"Output\\", \\"type\\": \\"String\\"}], \\"version\\": \\"Flip coin@sha256=83ef617eda2e04a688908716a02461237baee3cd04754ea99894e441b1f0679a\\"}"}},"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def flip_coin():\\n    \\"\\"\\"Flip a coin and output heads or tails randomly.\\"\\"\\"\\n    import random\\n    result = \'heads\' if random.randint(0, 1) == 0 else \'tails\'\\n    print(result)\\n    return result\\n\\ndef _serialize_str(str_value: str) -\\u003e str:\\n    if not isinstance(str_value, str):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of str.\'.format(\\n            str(str_value), str(type(str_value))))\\n    return str_value\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Flip coin\', description=\'Flip a coin and output heads or tails randomly.\')\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = flip_coin(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_str,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n"],"args":["----output-paths","$(results.Output.path)"],"resources":{}},{"name":"move-all-results-to-tekton-home","image":"registry.access.redhat.com/ubi8/ubi-micro@sha256:396baed3d689157d96aa7d8988fdfea7eb36684c8335eb391cf1952573e689c1","command":["sh","-c"],"args":["if [ -d /tekton/results ]; then mkdir -p /tekton/home/tep-results; mv /tekton/results/* /tekton/home/tep-results/ || true; fi\\n"],"resources":{}},{"name":"copy-artifacts","image":"quay.io/opendatahub/ds-pipelines-artifact-manager@sha256:db16085f67fd817088e7f6f592cf1b9c1558c56e0855303b3adea0b2fa18455f","command":["sh","-c"],"args":["#!/usr/bin/env sh\\npush_artifact() {\\n    workspace_dir=$(echo $(context.taskRun.name) | sed -e \\"s/conditional-execution-pipeline-0858f-//g\\")\\n    workspace_dest=/workspace/${workspace_dir}/artifacts/conditional-execution-pipeline-0858f/$(context.taskRun.name)\\n    artifact_name=$(basename $2)\\n    if [ -f \\"$workspace_dest/$artifact_name\\" ]; then\\n        echo sending to: ${workspace_dest}/${artifact_name}\\n        tar -cvzf $1.tgz -C ${workspace_dest} ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    elif [ -f \\"$2\\" ]; then\\n        tar -cvzf $1.tgz -C $(dirname $2) ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    else\\n        echo \\"$2 file does not exist. Skip artifact tracking for $1\\"\\n    fi\\n}\\npush_log() {\\n    cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log \\u003e step-main.log\\n    push_artifact main-log step-main.log\\n}\\nstrip_eof() {\\n    if [ -f \\"$2\\" ]; then\\n        awk \'NF\' $2 | head -c -1 \\u003e $1_temp_save \\u0026\\u0026 cp $1_temp_save $2\\n    fi\\n}\\npush_artifact \\"Output\\" \\"/tekton/home/tep-results/\\"$(basename \\"$(results.Output.path)\\")\\n"],"env":[{"name":"ARTIFACT_BUCKET","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_bucket\']"}}},{"name":"ARTIFACT_ENDPOINT","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint\']"}}},{"name":"ARTIFACT_ENDPOINT_SCHEME","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint_scheme\']"}}},{"name":"ARTIFACT_ITEMS","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_items\']"}}},{"name":"PIPELINETASK","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineTask\']"}}},{"name":"PIPELINERUN","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineRun\']"}}},{"name":"PODNAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"AWS_ACCESS_KEY_ID","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"accesskey"}}},{"name":"AWS_SECRET_ACCESS_KEY","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"secretkey"}}},{"name":"ARCHIVE_LOGS","value":"false"},{"name":"TRACK_ARTIFACTS","value":"true"},{"name":"STRIP_EOF","value":"true"}],"resources":{}}],"results":[{"name":"Output","type":"string","description":"/tmp/outputs/Output/data"}]}},{"name":"random-num","taskSpec":{"spec":null,"metadata":{"labels":{"pipelines.kubeflow.org/cache_enabled":"true"},"annotations":{"pipelines.kubeflow.org/component_spec_digest":"{\\"name\\": \\"Random num\\", \\"outputs\\": [{\\"name\\": \\"Output\\", \\"type\\": \\"Integer\\"}], \\"version\\": \\"Random num@sha256=da6efc3f1c1ef51912b3964a64b773aa38436116bb83f188a1a57ea6f1e6a541\\"}"}},"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def random_num(low, high):\\n    \\"\\"\\"Generate a random number between low and high.\\"\\"\\"\\n    import random\\n    result = random.randint(low, high)\\n    print(result)\\n    return result\\n\\ndef _serialize_int(int_value: int) -\\u003e str:\\n    if isinstance(int_value, str):\\n        return int_value\\n    if not isinstance(int_value, int):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of int.\'.format(\\n            str(int_value), str(type(int_value))))\\n    return str(int_value)\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Random num\', description=\'Generate a random number between low and high.\')\\n_parser.add_argument(\\"--low\\", dest=\\"low\\", type=int, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"--high\\", dest=\\"high\\", type=int, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = random_num(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_int,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n"],"args":["--low","0","--high","9","----output-paths","$(results.Output.path)"],"resources":{}},{"name":"move-all-results-to-tekton-home","image":"registry.access.redhat.com/ubi8/ubi-micro@sha256:396baed3d689157d96aa7d8988fdfea7eb36684c8335eb391cf1952573e689c1","command":["sh","-c"],"args":["if [ -d /tekton/results ]; then mkdir -p /tekton/home/tep-results; mv /tekton/results/* /tekton/home/tep-results/ || true; fi\\n"],"resources":{}},{"name":"copy-artifacts","image":"quay.io/opendatahub/ds-pipelines-artifact-manager@sha256:db16085f67fd817088e7f6f592cf1b9c1558c56e0855303b3adea0b2fa18455f","command":["sh","-c"],"args":["#!/usr/bin/env sh\\npush_artifact() {\\n    workspace_dir=$(echo $(context.taskRun.name) | sed -e \\"s/conditional-execution-pipeline-0858f-//g\\")\\n    workspace_dest=/workspace/${workspace_dir}/artifacts/conditional-execution-pipeline-0858f/$(context.taskRun.name)\\n    artifact_name=$(basename $2)\\n    if [ -f \\"$workspace_dest/$artifact_name\\" ]; then\\n        echo sending to: ${workspace_dest}/${artifact_name}\\n        tar -cvzf $1.tgz -C ${workspace_dest} ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    elif [ -f \\"$2\\" ]; then\\n        tar -cvzf $1.tgz -C $(dirname $2) ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    else\\n        echo \\"$2 file does not exist. Skip artifact tracking for $1\\"\\n    fi\\n}\\npush_log() {\\n    cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log \\u003e step-main.log\\n    push_artifact main-log step-main.log\\n}\\nstrip_eof() {\\n    if [ -f \\"$2\\" ]; then\\n        awk \'NF\' $2 | head -c -1 \\u003e $1_temp_save \\u0026\\u0026 cp $1_temp_save $2\\n    fi\\n}\\npush_artifact \\"Output\\" \\"/tekton/home/tep-results/\\"$(basename \\"$(results.Output.path)\\")\\n"],"env":[{"name":"ARTIFACT_BUCKET","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_bucket\']"}}},{"name":"ARTIFACT_ENDPOINT","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint\']"}}},{"name":"ARTIFACT_ENDPOINT_SCHEME","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint_scheme\']"}}},{"name":"ARTIFACT_ITEMS","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_items\']"}}},{"name":"PIPELINETASK","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineTask\']"}}},{"name":"PIPELINERUN","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineRun\']"}}},{"name":"PODNAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"AWS_ACCESS_KEY_ID","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"accesskey"}}},{"name":"AWS_SECRET_ACCESS_KEY","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"secretkey"}}},{"name":"ARCHIVE_LOGS","value":"false"},{"name":"TRACK_ARTIFACTS","value":"true"},{"name":"STRIP_EOF","value":"true"}],"resources":{}}],"results":[{"name":"Output","type":"string","description":"/tmp/outputs/Output/data"}]},"when":[{"input":"$(tasks.condition-1.results.outcome)","operator":"in","values":["true"]}]},{"name":"print-msg","taskSpec":{"spec":null,"metadata":{"labels":{"pipelines.kubeflow.org/cache_enabled":"true"},"annotations":{"pipelines.kubeflow.org/component_spec_digest":"{\\"name\\": \\"Print msg\\", \\"outputs\\": [], \\"version\\": \\"Print msg@sha256=a13aed2f155afe0e8a1d1e29efc69b1cb1c3b170c45129f80ffe8d0a03a07861\\"}"}},"params":[{"name":"random-num-Output","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def print_msg(msg):\\n    \\"\\"\\"Print a message.\\"\\"\\"\\n    print(msg)\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Print msg\', description=\'Print a message.\')\\n_parser.add_argument(\\"--msg\\", dest=\\"msg\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parsed_args = vars(_parser.parse_args())\\n\\n_outputs = print_msg(**_parsed_args)\\n"],"args":["--msg","heads and $(inputs.params.random-num-Output) \\u003e 5!"],"resources":{}}]},"when":[{"input":"$(tasks.condition-2.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"random-num-Output","value":"$(tasks.random-num.results.Output)"}]},{"name":"print-msg-2","taskSpec":{"spec":null,"metadata":{"labels":{"pipelines.kubeflow.org/cache_enabled":"true"},"annotations":{"pipelines.kubeflow.org/component_spec_digest":"{\\"name\\": \\"Print msg\\", \\"outputs\\": [], \\"version\\": \\"Print msg@sha256=a13aed2f155afe0e8a1d1e29efc69b1cb1c3b170c45129f80ffe8d0a03a07861\\"}"}},"params":[{"name":"random-num-Output","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def print_msg(msg):\\n    \\"\\"\\"Print a message.\\"\\"\\"\\n    print(msg)\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Print msg\', description=\'Print a message.\')\\n_parser.add_argument(\\"--msg\\", dest=\\"msg\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parsed_args = vars(_parser.parse_args())\\n\\n_outputs = print_msg(**_parsed_args)\\n"],"args":["--msg","heads and $(inputs.params.random-num-Output) \\u003c= 5!"],"resources":{}}]},"when":[{"input":"$(tasks.condition-3.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"random-num-Output","value":"$(tasks.random-num.results.Output)"}]},{"name":"random-num-2","taskSpec":{"spec":null,"metadata":{"labels":{"pipelines.kubeflow.org/cache_enabled":"true"},"annotations":{"pipelines.kubeflow.org/component_spec_digest":"{\\"name\\": \\"Random num\\", \\"outputs\\": [{\\"name\\": \\"Output\\", \\"type\\": \\"Integer\\"}], \\"version\\": \\"Random num@sha256=da6efc3f1c1ef51912b3964a64b773aa38436116bb83f188a1a57ea6f1e6a541\\"}"}},"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def random_num(low, high):\\n    \\"\\"\\"Generate a random number between low and high.\\"\\"\\"\\n    import random\\n    result = random.randint(low, high)\\n    print(result)\\n    return result\\n\\ndef _serialize_int(int_value: int) -\\u003e str:\\n    if isinstance(int_value, str):\\n        return int_value\\n    if not isinstance(int_value, int):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of int.\'.format(\\n            str(int_value), str(type(int_value))))\\n    return str(int_value)\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Random num\', description=\'Generate a random number between low and high.\')\\n_parser.add_argument(\\"--low\\", dest=\\"low\\", type=int, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"--high\\", dest=\\"high\\", type=int, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = random_num(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_int,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n"],"args":["--low","10","--high","19","----output-paths","$(results.Output.path)"],"resources":{}},{"name":"move-all-results-to-tekton-home","image":"registry.access.redhat.com/ubi8/ubi-micro@sha256:396baed3d689157d96aa7d8988fdfea7eb36684c8335eb391cf1952573e689c1","command":["sh","-c"],"args":["if [ -d /tekton/results ]; then mkdir -p /tekton/home/tep-results; mv /tekton/results/* /tekton/home/tep-results/ || true; fi\\n"],"resources":{}},{"name":"copy-artifacts","image":"quay.io/opendatahub/ds-pipelines-artifact-manager@sha256:db16085f67fd817088e7f6f592cf1b9c1558c56e0855303b3adea0b2fa18455f","command":["sh","-c"],"args":["#!/usr/bin/env sh\\npush_artifact() {\\n    workspace_dir=$(echo $(context.taskRun.name) | sed -e \\"s/conditional-execution-pipeline-0858f-//g\\")\\n    workspace_dest=/workspace/${workspace_dir}/artifacts/conditional-execution-pipeline-0858f/$(context.taskRun.name)\\n    artifact_name=$(basename $2)\\n    if [ -f \\"$workspace_dest/$artifact_name\\" ]; then\\n        echo sending to: ${workspace_dest}/${artifact_name}\\n        tar -cvzf $1.tgz -C ${workspace_dest} ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    elif [ -f \\"$2\\" ]; then\\n        tar -cvzf $1.tgz -C $(dirname $2) ${artifact_name}\\n        aws s3 --endpoint https://s3.amazonaws.com cp $1.tgz s3://mdas-pipeline/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\\n    else\\n        echo \\"$2 file does not exist. Skip artifact tracking for $1\\"\\n    fi\\n}\\npush_log() {\\n    cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log \\u003e step-main.log\\n    push_artifact main-log step-main.log\\n}\\nstrip_eof() {\\n    if [ -f \\"$2\\" ]; then\\n        awk \'NF\' $2 | head -c -1 \\u003e $1_temp_save \\u0026\\u0026 cp $1_temp_save $2\\n    fi\\n}\\npush_artifact \\"Output\\" \\"/tekton/home/tep-results/\\"$(basename \\"$(results.Output.path)\\")\\n"],"env":[{"name":"ARTIFACT_BUCKET","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_bucket\']"}}},{"name":"ARTIFACT_ENDPOINT","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint\']"}}},{"name":"ARTIFACT_ENDPOINT_SCHEME","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_endpoint_scheme\']"}}},{"name":"ARTIFACT_ITEMS","valueFrom":{"fieldRef":{"fieldPath":"metadata.annotations[\'tekton.dev/artifact_items\']"}}},{"name":"PIPELINETASK","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineTask\']"}}},{"name":"PIPELINERUN","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'tekton.dev/pipelineRun\']"}}},{"name":"PODNAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"AWS_ACCESS_KEY_ID","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"accesskey"}}},{"name":"AWS_SECRET_ACCESS_KEY","valueFrom":{"secretKeyRef":{"name":"mlpipeline-minio-artifact","key":"secretkey"}}},{"name":"ARCHIVE_LOGS","value":"false"},{"name":"TRACK_ARTIFACTS","value":"true"},{"name":"STRIP_EOF","value":"true"}],"resources":{}}],"results":[{"name":"Output","type":"string","description":"/tmp/outputs/Output/data"}]},"when":[{"input":"$(tasks.condition-4.results.outcome)","operator":"in","values":["true"]}]},{"name":"print-msg-3","taskSpec":{"spec":null,"metadata":{"labels":{"pipelines.kubeflow.org/cache_enabled":"true"},"annotations":{"pipelines.kubeflow.org/component_spec_digest":"{\\"name\\": \\"Print msg\\", \\"outputs\\": [], \\"version\\": \\"Print msg@sha256=a13aed2f155afe0e8a1d1e29efc69b1cb1c3b170c45129f80ffe8d0a03a07861\\"}"}},"params":[{"name":"random-num-2-Output","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def print_msg(msg):\\n    \\"\\"\\"Print a message.\\"\\"\\"\\n    print(msg)\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Print msg\', description=\'Print a message.\')\\n_parser.add_argument(\\"--msg\\", dest=\\"msg\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parsed_args = vars(_parser.parse_args())\\n\\n_outputs = print_msg(**_parsed_args)\\n"],"args":["--msg","tails and $(inputs.params.random-num-2-Output) \\u003e 15!"],"resources":{}}]},"when":[{"input":"$(tasks.condition-5.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"random-num-2-Output","value":"$(tasks.random-num-2.results.Output)"}]},{"name":"print-msg-4","taskSpec":{"spec":null,"metadata":{"labels":{"pipelines.kubeflow.org/cache_enabled":"true"},"annotations":{"pipelines.kubeflow.org/component_spec_digest":"{\\"name\\": \\"Print msg\\", \\"outputs\\": [], \\"version\\": \\"Print msg@sha256=a13aed2f155afe0e8a1d1e29efc69b1cb1c3b170c45129f80ffe8d0a03a07861\\"}"}},"params":[{"name":"random-num-2-Output","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def print_msg(msg):\\n    \\"\\"\\"Print a message.\\"\\"\\"\\n    print(msg)\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Print msg\', description=\'Print a message.\')\\n_parser.add_argument(\\"--msg\\", dest=\\"msg\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parsed_args = vars(_parser.parse_args())\\n\\n_outputs = print_msg(**_parsed_args)\\n"],"args":["--msg","tails and $(inputs.params.random-num-2-Output) \\u003c= 15!"],"resources":{}}]},"when":[{"input":"$(tasks.condition-6.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"random-num-2-Output","value":"$(tasks.random-num-2.results.Output)"}]},{"name":"condition-1","taskSpec":{"spec":null,"metadata":{},"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 $(inputs.params.operator) input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","$(inputs.params.operand1)","$(inputs.params.operand2)"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"params":[{"name":"operand1","value":"$(tasks.flip-coin.results.Output)"},{"name":"operand2","value":"heads"},{"name":"operator","value":"=="}]},{"name":"condition-2","taskSpec":{"spec":null,"metadata":{},"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 $(inputs.params.operator) input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","$(inputs.params.operand1)","$(inputs.params.operand2)"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"when":[{"input":"$(tasks.condition-1.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"operand1","value":"$(tasks.random-num.results.Output)"},{"name":"operand2","value":"5"},{"name":"operator","value":"\\u003e"}]},{"name":"condition-3","taskSpec":{"spec":null,"metadata":{},"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 $(inputs.params.operator) input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","$(inputs.params.operand1)","$(inputs.params.operand2)"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"when":[{"input":"$(tasks.condition-1.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"operand1","value":"$(tasks.random-num.results.Output)"},{"name":"operand2","value":"5"},{"name":"operator","value":"\\u003c="}]},{"name":"condition-4","taskSpec":{"spec":null,"metadata":{},"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 $(inputs.params.operator) input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","$(inputs.params.operand1)","$(inputs.params.operand2)"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"params":[{"name":"operand1","value":"$(tasks.flip-coin.results.Output)"},{"name":"operand2","value":"tails"},{"name":"operator","value":"=="}]},{"name":"condition-5","taskSpec":{"spec":null,"metadata":{},"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 $(inputs.params.operator) input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","$(inputs.params.operand1)","$(inputs.params.operand2)"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"when":[{"input":"$(tasks.condition-4.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"operand1","value":"$(tasks.random-num-2.results.Output)"},{"name":"operand2","value":"15"},{"name":"operator","value":"\\u003e"}]},{"name":"condition-6","taskSpec":{"spec":null,"metadata":{},"params":[{"name":"operand1","type":"string"},{"name":"operand2","type":"string"},{"name":"operator","type":"string"}],"steps":[{"name":"main","image":"python:alpine3.6","command":["sh","-ec","program_path=$(mktemp); printf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\";  python3 -u \\"$program_path\\" \\"$1\\" \\"$2\\""],"args":["import sys\\ninput1=str.rstrip(sys.argv[1])\\ninput2=str.rstrip(sys.argv[2])\\ntry:\\n  input1=int(input1)\\n  input2=int(input2)\\nexcept:\\n  input1=str(input1)\\noutcome=\\"true\\" if (input1 $(inputs.params.operator) input2) else \\"false\\"\\nf = open(\\"/tekton/results/outcome\\", \\"w\\")\\nf.write(outcome)\\nf.close()\\n","$(inputs.params.operand1)","$(inputs.params.operand2)"],"resources":{}}],"results":[{"name":"outcome","type":"string","description":"Conditional task outcome"}]},"when":[{"input":"$(tasks.condition-4.results.outcome)","operator":"in","values":["true"]}],"params":[{"name":"operand1","value":"$(tasks.random-num-2.results.Output)"},{"name":"operand2","value":"15"},{"name":"operator","value":"\\u003c="}]}]},"skippedTasks":[{"name":"print-msg-2","reason":"When Expressions evaluated to false","whenExpressions":[{"input":"false","operator":"in","values":["true"]}]},{"name":"random-num-2","reason":"When Expressions evaluated to false","whenExpressions":[{"input":"false","operator":"in","values":["true"]}]},{"name":"print-msg-3","reason":"Parent Tasks were skipped","whenExpressions":[{"input":"$(tasks.condition-5.results.outcome)","operator":"in","values":["true"]}]},{"name":"print-msg-4","reason":"Parent Tasks were skipped","whenExpressions":[{"input":"$(tasks.condition-6.results.outcome)","operator":"in","values":["true"]}]},{"name":"condition-5","reason":"Results were missing","whenExpressions":[{"input":"$(tasks.condition-4.results.outcome)","operator":"in","values":["true"]}]},{"name":"condition-6","reason":"Results were missing","whenExpressions":[{"input":"$(tasks.condition-4.results.outcome)","operator":"in","values":["true"]}]}],"childReferences":[{"apiVersion":"tekton.dev/v1","kind":"TaskRun","name":"conditional-execution-pipeline-0858f-flip-coin","pipelineTaskName":"flip-coin"},{"apiVersion":"tekton.dev/v1","kind":"TaskRun","name":"conditional-execution-pipeline-0858f-random-num","pipelineTaskName":"random-num","whenExpressions":[{"input":"$(tasks.condition-1.results.outcome)","operator":"in","values":["true"]}]},{"apiVersion":"tekton.dev/v1","kind":"TaskRun","name":"conditional-execution-pipeline-0858f-print-msg","pipelineTaskName":"print-msg","whenExpressions":[{"input":"$(tasks.condition-2.results.outcome)","operator":"in","values":["true"]}]},{"apiVersion":"tekton.dev/v1","kind":"TaskRun","name":"conditional-execution-pipeline-0858f-condition-1","pipelineTaskName":"condition-1"},{"apiVersion":"tekton.dev/v1","kind":"TaskRun","name":"conditional-execution-pipeline-0858f-condition-2","pipelineTaskName":"condition-2","whenExpressions":[{"input":"true","operator":"in","values":["true"]}]},{"apiVersion":"tekton.dev/v1","kind":"TaskRun","name":"conditional-execution-pipeline-0858f-condition-3","pipelineTaskName":"condition-3","whenExpressions":[{"input":"true","operator":"in","values":["true"]}]},{"apiVersion":"tekton.dev/v1","kind":"TaskRun","name":"conditional-execution-pipeline-0858f-condition-4","pipelineTaskName":"condition-4"}],"provenance":{}}}',
  },
  run,
});
